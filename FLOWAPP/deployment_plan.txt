# Plan Wdrożenia Aplikacji FlowApp - Krok po Kroku

## CZĘŚĆ 0: BRUTALNA PRAWDA I DIAGNOZA

Obecna aplikacja to znakomity, działający **prototyp**, ale **absolutnie nie jest gotowa na środowisko produkcyjne**. Główne problemy to:

1.  **Brak Procesu Budowania:** Aplikacja polega na zewnętrznych skryptach (CDN `esm.sh`) do kompilacji kodu React w przeglądarce. Jest to ekstremalnie niewydajne i zawodne. Skompilowana gra również sprawia problemy, ponieważ została zbudowana z myślą o serwerze HTTP, a nie o uruchamianiu z lokalnego pliku (`file:///`). To jest główna przyczyna naszych obecnych problemów.
2.  **Struktura Nieprzystosowana do Rozwoju:** Trzymanie całej aplikacji w jednym pliku i dodawanie gier jako oddzielnych, skompilowanych folderów jest trudne w utrzymaniu i skalowaniu.

**CEL:** Przekształcić ten prototyp w nowoczesną, wydajną i łatwą w utrzymaniu aplikację gotową do wdrożenia na serwer.

---

## CZĘŚĆ 1: PROFESJONALIZACJA APLIKACJI GŁÓWNEJ

Musimy wprowadzić standardowe narzędzia i procesy używane w nowoczesnym web developmencie.

### Krok 1: Wprowadzenie Procesu Budowania za pomocą Vite

Vite to nowoczesne i niezwykle szybkie narzędzie, które przekształci Twój kod źródłowy (pisany w czytelnym formacie JSX) w zoptymalizowane, statyczne pliki, które serwer może bezproblemowo wysłać do przeglądarki.

**Co należy zrobić:**
1.  **Zainstaluj Node.js i npm:** Jeśli jeszcze ich nie masz, pobierz i zainstaluj ze strony [nodejs.org](https://nodejs.org/). To jedyna instalacja, której potrzebujesz na swoim komputerze.
2.  **Stwórz nowy projekt Vite:** Otwórz terminal (wiersz poleceń) i wpisz:
    ```bash
    npm create vite@latest flow-app-prod -- --template react-ts
    ```
3.  **Przenieś pliki:**
    *   Przejdź do nowo utworzonego folderu `flow-app-prod`.
    *   Skopiuj zawartość swoich plików `sw.js` i `manifest.json` do folderu `public`.
    *   Skopiuj zawartość swojego głównego pliku `index.html` do pliku `index.html` w głównym folderze projektu Vite. Usuń z niego blok `<script type="importmap">`.
    *   Całą logikę z Twojego `index.js` przenieś do pliku `src/App.tsx`.
4.  **Refaktoryzacja do JSX:** To najważniejszy krok. Musisz przepisać kod z `React.createElement` na składnię JSX.
    *   **PRZED:** `React.createElement('div', { className: 'app-container' }, ...)`
    *   **PO:** `<div className="app-container">...</div>`
    *   **WSKAZÓWKA:** Podziel kod na mniejsze komponenty w osobnych plikach (np. `Header.tsx`, `SplashScreen.tsx`) wewnątrz folderu `src/components`.
5.  **Uruchom serwer deweloperski:** W terminalu, w folderze projektu, wpisz:
    ```bash
    npm install
    npm run dev
    ```
    To uruchomi lokalny serwer. Od teraz wszystkie testy będziesz przeprowadzać, wchodząc na adres `http://localhost:5173` (lub podobny, który wyświetli się w terminalu), co eliminuje wszystkie problemy z `file:///`.

### Krok 2: Uruchomienie Procesu Budowania
Gdy aplikacja działa poprawnie na serwerze deweloperskim, jesteś gotów ją "zbudować" do wersji produkcyjnej.
1.  W terminalu wpisz:
    ```bash
    npm run build
    ```
2.  Vite stworzy nowy folder o nazwie `dist`. Ten folder zawiera wszystko, co jest potrzebne do wdrożenia aplikacji na dowolnym serwerze hostingowym.

---

## CZĘŚĆ 2: INTEGRACJA GIER - STRATEGIA MONOREPO

Aby profesjonalnie zarządzać aplikacją główną i wieloma grami, najlepszym podejściem jest **monorepo**. Oznacza to, że wszystkie projekty trzymasz w jednym, nadrzędnym repozytorium kodu.

### Krok 1: Konfiguracja Monorepo
Użyjemy wbudowanej funkcji `workspaces` w npm.

1.  W głównym folderze (`flow-app-prod`) utwórz folder `packages`.
2.  Przenieś cały swój dotychczasowy kod aplikacji głównej (folder `src`, `public`, `index.html` itd.) do nowego folderu wewnątrz `packages`, np. `packages/main-app`.
3.  Kod źródłowy Twojej gry (`river-guardian-game`) umieść w `packages/river-guardian-game`. Ta gra również powinna być projektem Vite.
4.  W głównym folderze (`flow-app-prod`) zmodyfikuj plik `package.json` i dodaj sekcję `workspaces`:
    ```json
    {
      "name": "flow-app-monorepo",
      "private": true,
      "workspaces": [
        "packages/*"
      ],
      "scripts": {
        "dev": "npm run dev --workspace=packages/main-app"
      }
    }
    ```

### Krok 2: Scalenie Aplikacji i Gier
1.  **Budowanie:** Proces budowania (np. na platformie Vercel) automatycznie zbuduje każdą paczkę (`main-app`, `river-guardian-game`) do osobnego folderu wynikowego.
2.  **Integracja:** W kodzie `main-app` (`iframe`) będziesz teraz używać **relatywnej ścieżki** do zbudowanej gry, np. `url: '/river-guardian-game/index.html'`. Platforma hostingowa zrozumie, że ma serwować pliki z innego folderu w ramach tej samej domeny.

---

## CZĘŚĆ 3: WDROŻENIE (DEPLOYMENT)

Gdy masz już strukturę monorepo, wdrożenie jest proste.

1.  **Utwórz repozytorium Git:** Umieść cały folder `flow-app-prod` w repozytorium na GitHubie.
2.  **Wybierz platformę hostingową:** Zarejestruj się na **Vercel** ([vercel.com](https://vercel.com/)) lub **Netlify** ([netlify.com](https://www.netlify.com/)). Obie platformy mają świetne darmowe plany.
3.  **Połącz repozytorium:** W panelu Vercel/Netlify zaimportuj swoje repozytorium z GitHuba.
4.  **Konfiguracja:** Platforma automatycznie wykryje, że używasz Vite i monorepo. Upewnij się, że:
    *   **Framework:** jest ustawiony na "Vite".
    *   **Root Directory:** wskazuje na `packages/main-app` (jeśli wdrażasz tylko główną aplikację). Vercel dobrze radzi sobie z wykrywaniem monorepo i budowaniem wszystkiego.
5.  **Wdróż:** Kliknij "Deploy". Po kilku minutach Twoja aplikacja będzie dostępna online pod unikalnym adresem URL.

To jest sprawdzona i profesjonalna ścieżka, która rozwiąże obecne problemy i przygotuje Twój projekt na przyszłość.
